{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuardService = /*#__PURE__*/(() => {\n  class AuthGuardService {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      return this.authService.user.pipe( // Take 1 value from the observable and then immediately unsubscribe\n      // to avoid rerunning the logic in the guard unneccesarily\n      take(1), map(user => {\n        const isAuthenticated = !!user;\n\n        if (isAuthenticated) {\n          return true;\n        }\n\n        return this.router.createUrlTree(['/auth']);\n      }));\n    }\n\n  }\n\n  AuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n    return new (t || AuthGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardService,\n    factory: AuthGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuardService;\n})();","map":null,"metadata":{},"sourceType":"module"}