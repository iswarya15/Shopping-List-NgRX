{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs'; // import { FIREBASE_API_KEY } from './auth-secrets.service';\n\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router; //   private static readonly signUpUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${FIREBASE_API_KEY}`;\n      //   private static readonly loginUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${FIREBASE_API_KEY}`;\n      // Like Subject but allows to retrieve the previous value without having to\n      // subscribe at the time the value was emitted\n\n      this.user = new BehaviorSubject(null);\n    }\n\n    signup(email, password) {\n      return of(true);\n    }\n\n    login(email, password) {\n      return of(true);\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const tokenExpirationDate = new Date(userData._tokenExpirationDate);\n      const loadedUser = new User(userData.email, userData.id, userData._token, tokenExpirationDate);\n\n      if (loadedUser.token) {\n        const expirationDuration = tokenExpirationDate.getTime() - new Date().getTime();\n        this.emitUser(loadedUser, expirationDuration);\n      }\n    }\n\n    logout() {\n      this.user.next(null); // There is only one login in auth component, however there are multiple\n      // ways of logging out (logout button, token expiring etc.) so we do this\n      // redirect in this service rather than a component\n\n      this.router.navigate(['/auth']); // Remove user data on logout\n\n      localStorage.removeItem('userData'); // Clear the token expiration timer\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      const tokenExpirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, tokenExpirationDate);\n      this.emitUser(user, expiresIn * 1000); // Persist the user to local storage so that it survives session restarts\n\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    handleError(errorResponse) {\n      let errorMessage = 'An unknown error occurred!';\n\n      if (!errorResponse.error || !errorResponse.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorResponse.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email exists already';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'This email does not exist';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'This password is not correct';\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n\n    emitUser(user, expirationDuration) {\n      this.user.next(user);\n      this.autoLogout(expirationDuration);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}