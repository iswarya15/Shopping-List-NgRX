{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { exhaustMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(authService) {\n      this.authService = authService;\n    }\n\n    intercept(request, next) {\n      return this.authService.user.pipe( // Take 1 value from the observable and then immediately unsubscribe\n      take(1), // Waits for first Observable (i.e the user Observable) to complete and\n      // passes the data through. We then return a new Observable (i.e. the http\n      // Observable) which replaces the previous one in the Observable chain.\n      exhaustMap(user => {\n        if (!user) {\n          // Do not attach token for login or signup (alteratively could check url)\n          return next.handle(request);\n        }\n\n        const authRequest = request.clone({\n          params: new HttpParams().set('auth', user.token)\n        });\n        return next.handle(authRequest);\n      }));\n    }\n\n  }\n\n  AuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac\n  });\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}