{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as ShoppingListActions from '../../shopping-list/store/shopping-list.actions';\nlet RecipeDetailComponent = class RecipeDetailComponent {\n  constructor(shoppingListService, recipeService, router, route, store) {\n    this.shoppingListService = shoppingListService;\n    this.recipeService = recipeService;\n    this.router = router;\n    this.route = route;\n    this.store = store;\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.id = +params['id'];\n      this.recipe = this.recipeService.getRecipe(this.id);\n    });\n  }\n\n  onAddToShoppingList() {\n    // Max comments on two viable approaches in the video:\n    // 1: Directly access the shopping list service as is done here\n    // 2: Access the recipe service here (which seems natural as we are in the recipe\n    //    detail component) and inject the shopping list service into the recipe service\n    //    He takes this approach in the video and it leads to a whole lot more code! Also\n    //    I don't like it as it creates an unnecessary dependency for the recipe service.\n    //  this.shoppingListService.addIngredients(this.recipe.ingredients);\n    this.store.dispatch(new ShoppingListActions.AddIngredients(this.recipe.ingredients));\n  }\n\n  onEditRecipe() {\n    this.router.navigate(['edit'], {\n      relativeTo: this.route\n    });\n  }\n\n  onDeleteRecipe() {\n    this.recipeService.deleteRecipe(this.id);\n    this.router.navigate(['/recipes']);\n  }\n\n};\nRecipeDetailComponent = __decorate([Component({\n  selector: 'app-recipe-detail',\n  templateUrl: './recipe-detail.component.html',\n  styleUrls: ['./recipe-detail.component.css']\n})], RecipeDetailComponent);\nexport { RecipeDetailComponent };","map":null,"metadata":{},"sourceType":"module"}