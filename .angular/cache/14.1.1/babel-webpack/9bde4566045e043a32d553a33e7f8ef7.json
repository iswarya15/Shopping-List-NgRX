{"ast":null,"code":"import { Ingredient } from '../../shared/ingredient.model';\nimport * as ShoppingListActions from './shopping-list.actions'; // Reducer takes 2 arguments - Current State, Action\n\nconst initialState = {\n  ingredients: [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)]\n}; // state = initialState (Default value)\n\nexport function shoppingListReducer(state = initialState, action) {\n  console.log('ShoppingList Action => ', action.type);\n  console.log('ShoppingList Reducer: Action Payload => ', action.payload);\n  console.log('Current State => ', state);\n\n  switch (action.type) {\n    case ShoppingListActions.ADD_INGREDIENT:\n      return Object.assign(Object.assign({}, state), {\n        ingredients: [...state.ingredients, action.payload]\n      });\n\n    case ShoppingListActions.ADD_INGREDIENTS:\n      console.log('Modified state => ', Object.assign(Object.assign({}, state), {\n        ingredients: [...state.ingredients, ...action.payload]\n      }));\n      return Object.assign(Object.assign({}, state), {\n        ingredients: [...state.ingredients, ...action.payload]\n      });\n\n    case ShoppingListActions.UPDATE_INGREDIENTS:\n      const ingredient = state.ingredients[action.payload.index];\n      const updatedIngredient = Object.assign(Object.assign({}, ingredient), action.payload.ingredient);\n      const updatedIngredients = [...state.ingredients];\n      updatedIngredients[action.payload.index] = updatedIngredient;\n      console.log('Modified state => ', Object.assign(Object.assign({}, state), {\n        ingredients: updatedIngredients\n      }));\n      return Object.assign(Object.assign({}, state), {\n        ingredients: updatedIngredients\n      });\n\n    case ShoppingListActions.DELETE_INGREDIENT:\n      const currentIngredients = state.ingredients;\n      const filteredIngredients = currentIngredients.filter((ingredient, index) => index !== action.payload);\n      console.log('Modified State => ', filteredIngredients);\n      return Object.assign(Object.assign({}, state), {\n        ingredients: filteredIngredients\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}