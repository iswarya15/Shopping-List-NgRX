{"ast":null,"code":"import { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../recipes/recipe.service\";\nimport * as i3 from \"../auth/auth.service\";\nexport let DataStorageService = /*#__PURE__*/(() => {\n  class DataStorageService {\n    constructor(http, recipeService, authService) {\n      this.http = http;\n      this.recipeService = recipeService;\n      this.authService = authService;\n    }\n\n    storeRecipes() {\n      const recipes = this.recipeService.Recipes;\n      this.http.put(`${DataStorageService.baseUrl}/recipes.json`, recipes).subscribe(response => console.log(response));\n    }\n\n    fetchRecipes() {\n      return this.http.get(`${DataStorageService.baseUrl}/recipes.json`).pipe(map(recipes => {\n        return recipes.map(recipe => {\n          // Prevent ingredients from being null as the user is not\n          // required to enter ingredients for a recipe.\n          // Note that alternatively we could have done this in addRecipe\n          // and updateRecipe methods of the RecipeService.\n          return Object.assign(Object.assign({}, recipe), {\n            ingredients: recipe.ingredients ? recipe.ingredients : []\n          });\n        });\n      }), tap(recipes => this.recipeService.Recipes = recipes));\n    }\n\n  }\n\n  DataStorageService.baseUrl = 'https://ng-course-recipe-book-bce51-default-rtdb.firebaseio.com';\n\n  DataStorageService.ɵfac = function DataStorageService_Factory(t) {\n    return new (t || DataStorageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RecipeService), i0.ɵɵinject(i3.AuthService));\n  };\n\n  DataStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataStorageService,\n    factory: DataStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}